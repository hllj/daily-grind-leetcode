{"id":708100140,"lang":"python3","time":"1 month, 1 week","timestamp":1653627614,"status_display":"Accepted","runtime":"3548 ms","url":"/submissions/detail/708100140/","is_pending":"Not Pending","title":"Minimum Lines to Represent a Line Chart","memory":"60.3 MB","code":"import math\nclass Solution:\n    def is_same_line(self, a, b):\n        a0 = a[0]\n        a1 = a[1]\n        b0 = b[0]\n        b1 = b[1]\n        return (a0 * b1 == a1 * b0)\n    def minimumLines(self, stockPrices: List[List[int]]) -> int:\n        n = len(stockPrices)\n        if n == 1:\n            return 0\n        stockPrices = sorted(stockPrices, key=lambda x: x[0])\n        print(stockPrices)\n        curr_line = 0\n        curr_vec = None\n        for i in range(1, n):\n            x1 = stockPrices[i - 1][0]\n            y1 = stockPrices[i - 1][1]\n            x2 = stockPrices[i][0]\n            y2 = stockPrices[i][1]\n            u = x2 - x1\n            v = y2 - y1\n            new_vec = (x2 - x1, y2 - y1)\n            print(new_vec)\n            if curr_vec is None:\n                curr_vec = new_vec\n                curr_line = 1\n            if self.is_same_line(curr_vec, new_vec) is False:\n                curr_line += 1\n                curr_vec = new_vec\n        return curr_line","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-lines-to-represent-a-line-chart"}