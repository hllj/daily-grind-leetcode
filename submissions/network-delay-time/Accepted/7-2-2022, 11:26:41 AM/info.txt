{"id":736311646,"lang":"python3","time":"4 days, 11 hours","timestamp":1656736001,"status_display":"Accepted","runtime":"941 ms","url":"/submissions/detail/736311646/","is_pending":"Not Pending","title":"Network Delay Time","memory":"17.2 MB","code":"class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        adj = {}\n        for i in range(1, n + 1):\n            adj[i] = []\n        weight = {}\n        for time in times:\n            u, v, w = time\n            adj[u].append(v)\n            weight[(u, v)] = w\n        inf = float('inf')\n        f = {}\n        for i in range(1, n + 1):\n            f[i] = inf\n        f[k] = 0\n        visited = set()\n        for i in range(n):\n            u_best = None\n            d_best = inf\n            for u in range(1, n + 1):\n                if f[u] < d_best and u not in visited:\n                    u_best = u\n                    d_best = f[u]\n            # print('choose', u_best)\n            if u_best == None:\n                break\n            u = u_best\n            visited.add(u)\n            for v in range(1, n + 1):\n                if (u, v) in weight:\n                    f[v] = min(f[v], f[u] + weight[(u, v)])\n            # print(f)\n        res = 0\n        for i in range(1, n + 1):\n            if i != k:\n                if f[i] == inf:\n                    return -1\n                else:\n                    res = max(res, f[i])\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time"}