{"id":725110890,"lang":"python3","time":"2 weeks, 5 days","timestamp":1655554241,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/725110890/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class WordDictionary:\n\n    def __init__(self):\n        self.child = {}\n\n    def dfs(self, current, word, idx):\n        if (idx == len(word)):\n            return '#' in current\n        if word[idx] == '.':\n            check = False\n            for i in range(ord('a'), ord('z') + 1):\n                c = chr(i)\n                t = current\n                if c in t:\n                    t = t[c]\n                    check = check or self.dfs(t, word, idx + 1)\n            return check\n        else:\n            if word[idx] not in current:\n                return False\n            current = current[word[idx]]\n            return self.dfs(current, word, idx + 1)\n                        \n        \n    def addWord(self, word: str) -> None:\n        current = self.child\n        for c in word:\n            if c not in current:\n                current[c] = {}\n            current = current[c]\n        current['#'] = 1\n\n    def search(self, word: str) -> bool:\n        current = self.child\n        return self.dfs(current, word, 0)\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111111111000000000000000","title_slug":"design-add-and-search-words-data-structure"}