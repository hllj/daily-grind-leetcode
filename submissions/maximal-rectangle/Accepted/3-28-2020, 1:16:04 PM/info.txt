{"id":316641834,"lang":"cpp","time":"2 years, 3 months","timestamp":1585376164,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/316641834/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"9.7 MB","code":"class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        if(matrix.empty()) return 0;\n        const int m = matrix.size(), n = matrix[0].size();\n        int area = 0;\n        vector<vector<int>> dp(m, vector<int>(n + 1, 0));\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(!i) dp[i][j] = matrix[i][j] - '0';\n                else if(matrix[i][j] - '0') dp[i][j] = dp[i - 1][j] + 1;\n                else dp[i][j] = 0;\n            }\n        }\n        for(int j = 0; j < m; j++) {\n            stack<int> s;\n            int i = 0;\n            while(i <= n) {\n                if(s.empty() || dp[j][i] >= dp[j][s.top()]) s.push(i++);\n                else {\n                    int cur = s.top(); s.pop();\n                    area = max(area, dp[j][cur] * (s.empty() ? i : i - s.top() - 1));\n                }\n            }\n        }\n        return area;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}