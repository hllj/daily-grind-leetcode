{"id":725164300,"lang":"python3","time":"2 weeks, 3 days","timestamp":1655560509,"status_display":"Accepted","runtime":"5109 ms","url":"/submissions/detail/725164300/","is_pending":"Not Pending","title":"Implement Magic Dictionary","memory":"16.7 MB","code":"class Trie:\n    def __init__(self):\n        self.child = {}\n    def insert(self, word):\n        cur = self.child\n        for c in word:\n            if c not in cur:\n                cur[c] = {}\n            cur = cur[c]\n        cur['#'] = 1\n    def search(self, word):\n        cur = self.child\n        for c in word:\n            if c not in cur:\n                return False\n            cur = cur[c]\n        return '#' in cur\n\nclass MagicDictionary:\n\n    def __init__(self):\n        self.trie = Trie()\n\n    def buildDict(self, dictionary: List[str]) -> None:\n        for word in dictionary:\n            self.trie.insert(word)\n\n    def search(self, searchWord: str) -> bool:\n        for i in range(len(searchWord)):\n            for c in range(ord('a'), ord('z') + 1):\n                if chr(c) != searchWord[i]:\n                    candidate = searchWord[:i] + chr(c) + searchWord[i + 1:]\n                    is_search = self.trie.search(candidate)\n                    # print(candidate, is_search)\n                    if is_search is True:\n                        return True\n        return False\n\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary()\n# obj.buildDict(dictionary)\n# param_2 = obj.search(searchWord)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"implement-magic-dictionary"}