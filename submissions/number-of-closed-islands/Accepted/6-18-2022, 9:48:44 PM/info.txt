{"id":725193652,"lang":"python3","time":"2 weeks, 4 days","timestamp":1655563724,"status_display":"Accepted","runtime":"190 ms","url":"/submissions/detail/725193652/","is_pending":"Not Pending","title":"Number of Closed Islands","memory":"14.5 MB","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, -1, 0, 1]\n    def dfs(self, x, y, n, m, grid, island, avail):\n        island.append((x, y))\n        avail[x][y] = False\n        for k in range(4):\n            x1 = x + self.dx[k]\n            y1 = y + self.dy[k]\n            if (x1 < 0) or (x1 == n) or (y1 < 0) or (y1 == m):\n                self.is_reach_bound = True\n                continue\n            if avail[x1][y1] is True and grid[x1][y1] == 0:\n                self.dfs(x1, y1, n, m, grid, island, avail)\n    def closedIsland(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        avail = [[True for _ in range(m)] for _ in range(n)]\n        res = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 0 and avail[i][j] is True:\n                    island = []\n                    self.is_reach_bound = False\n                    self.dfs(i, j, n, m, grid, island, avail)\n                    # print('res', island, self.is_reach_bound)\n                    if self.is_reach_bound is False:\n                        res += 1\n        return res","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"number-of-closed-islands"}