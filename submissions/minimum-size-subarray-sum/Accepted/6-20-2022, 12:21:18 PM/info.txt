{"id":726469981,"lang":"python3","time":"2Â weeks, 1Â day","timestamp":1655702478,"status_display":"Accepted","runtime":"1551 ms","url":"/submissions/detail/726469981/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"27.1 MB","code":"class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        f = [0] * (n + 1)\n        res = int(1e5 + 1)\n        for j in range(1, n + 1):\n            f[j] = f[j - 1] + nums[j - 1]\n            l = 1\n            r = j\n            while (l <= r):\n                m = int((l + r) >> 1);\n                if f[j] - f[m - 1] >= target:\n                    res = min(res, j - m + 1)\n                    l = m + 1\n                else:\n                    r = m - 1\n        if res == int(1e5 + 1):\n            return 0\n        else:\n            return res","compare_result":"11111111111111111111","title_slug":"minimum-size-subarray-sum"}