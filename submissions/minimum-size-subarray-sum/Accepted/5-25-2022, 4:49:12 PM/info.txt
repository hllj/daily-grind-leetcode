{"id":706831929,"lang":"python3","time":"1Â month, 1Â week","timestamp":1653472152,"status_display":"Accepted","runtime":"877 ms","url":"/submissions/detail/706831929/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"17.6 MB","code":"class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        f = [0] * (n + 1)\n        f[0] = 0\n        for i in range(1, n + 1):\n            f[i] = f[i - 1] + nums[i - 1]\n        if f[n] < target:\n            return 0\n        print(f)\n        res = n\n        for j in range(1, n + 1):\n            l = 1\n            r = j\n            print('check', j)\n            while (l <= r):\n                m = (l + r) // 2;\n                if f[j] - f[m - 1] >= target:\n                    print(m, j)\n                    res = min(res, j - m + 1)\n                    print('res', res)\n                    l = m + 1\n                else:\n                    r = m - 1\n        return res","compare_result":"1111111111111111111","title_slug":"minimum-size-subarray-sum"}