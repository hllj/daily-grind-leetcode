{"id":730535159,"lang":"python3","time":"1 week, 5 days","timestamp":1656126431,"status_display":"Accepted","runtime":"187 ms","url":"/submissions/detail/730535159/","is_pending":"Not Pending","title":"Word Ladder","memory":"17.6 MB","code":"class Solution:\n    def check(self, x1, x2):\n        cnt = 0\n        for i in range(len(x1)):\n            if cnt > 1:\n                return False\n            if x1[i] != x2[i]:\n                cnt += 1\n        if cnt == 1:\n            return True\n        return False\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        if endWord not in wordList:\n            return 0\n        next_word = {}\n        wordList.append(beginWord)\n        for word in wordList:\n            n = len(word)\n            for i in range(n):\n                change = word[:i] + \"*\" + word[i + 1:]\n                if change not in next_word:\n                    next_word[change] = [word]\n                else:\n                    next_word[change].append(word)\n        # print(next_word)\n        q = []\n        q.append((beginWord, 1))\n        visited = set()\n        visited.add(beginWord)\n        while len(q) > 0:\n            word, cnt = q.pop(0)\n            n = len(word)\n            for i in range(n):\n                change = word[:i] + \"*\" + word[i + 1:]\n                for nxt in next_word[change]:\n                    if nxt not in visited and self.check(word, nxt):\n                        q.append((nxt, cnt + 1))\n                        visited.add(nxt)\n                        if nxt == endWord:\n                            return cnt + 1\n        return 0","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder"}