{"id":712963579,"lang":"python3","time":"1Â month","timestamp":1654191657,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/712963579/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"14.6 MB","code":"class MyCircularQueue:\n\n    def __init__(self, k: int):\n        self.queue = []\n        self.max_size = k\n\n    def enQueue(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.queue.append(value)\n        return True\n\n    def deQueue(self) -> bool:\n        if self.isEmpty():\n            return False\n        self.queue.pop(0)\n        return True\n\n    def Front(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.queue[0]\n\n    def Rear(self) -> int:\n        if self.isEmpty():\n            return -1\n        return self.queue[-1]\n\n    def isEmpty(self) -> bool:\n        return len(self.queue) == 0\n\n    def isFull(self) -> bool:\n        return len(self.queue) == self.max_size\n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue"}