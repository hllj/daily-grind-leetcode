{"id":724086356,"lang":"python3","time":"2 weeks, 4 days","timestamp":1655432041,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/724086356/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def dfs(self, u, i):\n        if u == None:\n            return 0\n        if i == 0:\n            return self.dfs(u.left, 1) + self.dfs(u.right, 1)\n        else:\n            return 1 + self.dfs(u.left, 0) + self.dfs(u.right, 0)\n    def minCameraCover(self, root: Optional[TreeNode]) -> int:\n        ans1 = self.dfs(root, 0)\n        ans2 = self.dfs(root, 1)\n        return max(1, min(ans1, ans2))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111100101000000011111111010011001001000000000110010100011000000000001000000100001001000000000000000000000000","title_slug":"binary-tree-cameras"}