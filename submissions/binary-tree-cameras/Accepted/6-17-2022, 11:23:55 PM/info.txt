{"id":724533942,"lang":"python3","time":"2 weeks, 5 days","timestamp":1655483035,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/724533942/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def dfs(self, node, par=None):\n        if node:\n            self.dfs(node.left, node)\n            self.dfs(node.right, node)\n            if (par is None and node not in self.covered or node.left not in self.covered or node.right not in self.covered):\n                self.ans += 1\n                self.covered.update({node, par, node.left, node.right})\n    def minCameraCover(self, root: Optional[TreeNode]) -> int:\n        self.ans = 0\n        self.covered = {None}\n        self.dfs(root)\n        return self.ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}