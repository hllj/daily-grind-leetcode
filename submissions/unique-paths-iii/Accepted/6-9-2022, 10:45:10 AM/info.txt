{"id":717789760,"lang":"python3","time":"3 weeks, 5 days","timestamp":1654746310,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/717789760/","is_pending":"Not Pending","title":"Unique Paths III","memory":"13.9 MB","code":"class Solution:\n    dx = [1, 0, 0, -1]\n    dy = [0, -1, 1, 0]\n    cnt = 0\n    def dfs(self, idx, u, v, avail, grid, t0, t1, n_empty, m, n):\n        if u == t0 and v == t1:\n            if (idx - 2 == n_empty):\n                self.cnt += 1\n        for k in range(4):\n            u1, v1 = u + self.dx[k], v + self.dy[k]\n            if (u1 < 0) or (u1 == m) or (v1 < 0) or (v1 == n) or grid[u1][v1] == -1:\n                continue\n            if avail[u1][v1] == True:\n                avail[u1][v1] = False\n                self.dfs(idx + 1, u1, v1, avail, grid, t0, t1, n_empty, m, n)\n                avail[u1][v1] = True\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        self.cnt = 0\n        m = len(grid)\n        n = len(grid[0])\n        s0, s1 = -1, -1\n        t0, t1 = -1, -1\n        n_empty = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    s0, s1 = i, j\n                if grid[i][j] == 2:\n                    t0, t1 = i, j\n                if grid[i][j] == 0:\n                    n_empty += 1\n\n        avail = [[True for _ in range(n)] for _ in range(m)]\n        avail[s0][s1] = False\n        self.dfs(1, s0, s1, avail, grid, t0, t1, n_empty, m, n)\n        return self.cnt","compare_result":"111111111111111111111111111111111111111","title_slug":"unique-paths-iii"}