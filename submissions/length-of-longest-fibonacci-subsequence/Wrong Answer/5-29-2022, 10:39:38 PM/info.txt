{"id":709861848,"lang":"python3","time":"1 month, 1 week","timestamp":1653838778,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/709861848/","is_pending":"Not Pending","title":"Length of Longest Fibonacci Subsequence","memory":"N/A","code":"class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        n = len(arr)\n        f = [0] * (n + 1)\n        inf = int(1e3 + 1)\n        b = [inf] * (n + 1)\n        b[0] = -inf\n        f[1] = 1\n        res = 1\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                l = 0\n                r = j - 1\n                v = arr[i - 1] - arr[j - 1]\n                while l <= r:\n                    m = (l + r) // 2\n                    if arr[m - 1] == v:\n                        f[i] = max(f[i], f[m] + 2)\n                        res = max(res, f[i])\n                        break\n                    if arr[m - 1] > v:\n                        r = m - 1\n                    else:\n                        l = m + 1\n                # for prev in range(1, j):\n                #     if arr[prev - 1] + arr[j - 1] == arr[i - 1]:\n                #         f[i] = max(f[i], f[prev] + 2)\n                #         res = max(res,  f[i])\n        return res\n    \n# O(N^3) -> This one is fine\n\n# O(N^2logN) -> Because \"Given a strictly increasing array arr\"\n        \n# f(i): longest length of fibonacci subseq end at i\n\n# f(i) = f(prev) + 2 if a[prev] = a[i] - a[j] \n# res = max(res, f(i))","compare_result":"01111010000011000000000000000000000000000000000000000000","title_slug":"length-of-longest-fibonacci-subsequence"}