{"id":737879556,"lang":"python3","time":"2 days, 13 hours","timestamp":1656903280,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/737879556/","is_pending":"Not Pending","title":"Candy","memory":"N/A","code":"import heapq\nclass Solution:\n    def candy(self, ratings: List[int]) -> int:\n        li = []\n        for idx, rating in enumerate(ratings):\n            li.append((rating, idx))\n        heapq.heapify(li)\n        n = len(ratings)\n        res = [0 for _ in range(n)]\n        while len(li):\n            rating, idx = li[0]\n            heapq.heappop(li)\n            equal = False\n            r_max = 0\n            if (idx - 1 >= 0):\n                r_max = max(r_max, res[idx - 1])\n                equal = equal or (res[idx - 1] != 0 and ratings[idx - 1] < rating)\n            if (idx + 1 < n):\n                r_max =max(r_max, res[idx + 1])\n                equal = equal or (res[idx + 1] != 0 and ratings[idx +1] < rating)\n            print(rating, idx, r_max, equal)\n            if r_max == 0:\n                res[idx] = 1\n            elif equal:\n                res[idx] = r_max + 1\n            else:\n                res[idx] = r_max - 1\n                \n        print(res)\n        return sum(res)","compare_result":"111001011111111000001110110111100110000010111111","title_slug":"candy"}