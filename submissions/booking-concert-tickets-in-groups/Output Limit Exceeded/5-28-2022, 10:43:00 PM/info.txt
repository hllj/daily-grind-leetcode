{"id":709112242,"lang":"python3","time":"1 month, 1 week","timestamp":1653752580,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/709112242/","is_pending":"Not Pending","title":"Booking Concert Tickets in Groups","memory":"N/A","code":"class BookMyShow:\n\n    def __init__(self, n: int, m: int):\n        self.n = n\n        self.m = m\n        self.row_status = [0] * n\n\n    def gather(self, k: int, maxRow: int) -> List[int]:\n        row_status_copy = self.row_status.copy()\n        print('gather', k, maxRow)\n        print('row status', row_status_copy)\n        flag = False\n        res = []\n        for i in range(maxRow + 1):\n            p = row_status_copy[i]\n            print('p', p)\n            print('condition', p + k, self.m)\n            if (p + k <= self.m):\n                row_status_copy[i] += k\n                flag = True\n                res = [i, p]\n                break\n        if flag is True:\n            self.row_status = row_status_copy\n        return res\n\n    def scatter(self, k: int, maxRow: int) -> bool:\n        print('scatter', k, maxRow)\n        row_status_copy = self.row_status.copy()\n        for i in range(maxRow + 1):\n            n_in = min(k, self.m - row_status_copy[i])\n            k -= n_in\n            row_status_copy[i] += n_in\n        print('k scatter', k)\n        if k == 0:\n            self.row_status = row_status_copy\n            return True\n        else:\n            return False\n\n\n# Your BookMyShow object will be instantiated and called as such:\n# obj = BookMyShow(n, m)\n# param_1 = obj.gather(k,maxRow)\n# param_2 = obj.scatter(k,maxRow)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"booking-concert-tickets-in-groups"}