{"id":728174944,"lang":"python3","time":"2 weeks, 1 day","timestamp":1655873634,"status_display":"Accepted","runtime":"698 ms","url":"/submissions/detail/728174944/","is_pending":"Not Pending","title":"Number of Islands","memory":"16.5 MB","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n    def dfs(self, grid, x, y):\n        self.avail[x][y] = False\n        for i in range(4):\n            new_x = x + self.dx[i]\n            new_y = y + self.dy[i]\n            if (new_x < 0) or (new_x == self.n) or (new_y < 0) or (new_y == self.m):\n                continue\n            if (self.avail[new_x][new_y] is True) and (grid[new_x][new_y] == '1'):\n                self.dfs(grid, new_x, new_y)\n    def numIslands(self, grid: List[List[str]]) -> int:\n        self.n = len(grid)\n        self.m = len(grid[0])\n        self.avail = [[True for _ in range(self.m)] for _ in range(self.n)]\n        cnt = 0\n        for i in range(self.n):\n            for j in range(self.m):\n                if (self.avail[i][j] is True) and (grid[i][j] == '1'):\n                    cnt += 1\n                    self.dfs(grid, i, j)\n        return cnt","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands"}