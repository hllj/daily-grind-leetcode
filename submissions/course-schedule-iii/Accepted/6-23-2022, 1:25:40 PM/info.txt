{"id":729083299,"lang":"python3","time":"1Â week, 5Â days","timestamp":1655965540,"status_display":"Accepted","runtime":"1280 ms","url":"/submissions/detail/729083299/","is_pending":"Not Pending","title":"Course Schedule III","memory":"20.1 MB","code":"import heapq\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses = sorted(courses, key=lambda x: x[1])\n        # n = len(courses)\n        # m = courses[-1][1]\n        # f = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        # for j in range(m):\n        #     f[0][j] = 0\n        # res = 0\n        # for j in range(m + 1):\n        #     for i in range(1, n + 1):\n        #         f[i][j] = f[i - 1][j]\n        #         if j >= courses[i - 1][0] and j <= courses[i - 1][1]:\n        #             f[i][j] = max(f[i][j], f[i - 1][j - courses[i - 1][0]] + 1)\n        #         res = max(res, f[i][j])\n        # return res\n        \n        heap = []\n        time = 0\n        for course in courses:\n            if course[0] + time <= course[1]:\n                heapq.heappush(heap, -course[0])\n                time += course[0]\n            else:\n                if len(heap) > 0 and -heap[0] > course[0]:\n                    time += course[0] + heap[0]\n                    heapq.heappushpop(heap, -course[0])\n        return len(heap)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"course-schedule-iii"}