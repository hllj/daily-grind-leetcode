{"id":706780244,"lang":"python3","time":"1 month, 1 week","timestamp":1653464946,"status_display":"Accepted","runtime":"339 ms","url":"/submissions/detail/706780244/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"17.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    height = 0\n    res = 0\n    def traverse(self, p, h):\n        if p == None:\n            return\n        p.height = h\n        self.height = max(self.height, h)\n        self.traverse(p.left, h + 1)\n        self.traverse(p.right, h + 1)\n    \n    def searchDeepestNode(self, p):\n        if p == None:\n            return\n        if p.height == self.height:\n            self.res += p.val\n        self.searchDeepestNode(p.left)\n        self.searchDeepestNode(p.right)\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:   \n        self.height = 0\n        self.res = 0\n        self.traverse(root, 0)\n        self.searchDeepestNode(root)\n        return self.res\n                \n        ","compare_result":"11111111111111111111111111111111111","title_slug":"deepest-leaves-sum"}