{"id":735274155,"lang":"python3","time":"5 days, 22 hours","timestamp":1656612255,"status_display":"Accepted","runtime":"3894 ms","url":"/submissions/detail/735274155/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"16.1 MB","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, -1, 0, 1]\n    def bfs(self, heights, rows, cols, k):\n        q = []\n        visited = set()\n        q.append((0, 0))\n        visited.add((0, 0))\n        while len(q) > 0:\n            u, v = q.pop(0)\n            for i in range(4):\n                u1, v1 = u + self.dx[i], v + self.dy[i]\n                if u1 < 0 or u1 == rows or v1 < 0 or v1 == cols:\n                    continue\n                if (u1, v1) not in visited and abs(heights[u1][v1] - heights[u][v]) <= k:\n                    if u1 == rows - 1 and v1 == cols - 1:\n                        return True\n                    q.append((u1, v1))\n                    visited.add((u1, v1))\n        return False\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        rows = len(heights)\n        cols = len(heights[0])\n        # print(rows, cols)\n        v_max = max(max(x) for x in heights)\n        v_min = min(min(x) for x in heights)\n        l = 0\n        r = v_max - v_min\n        res = r\n        # print(self.bfs(heights, rows, cols, 3))\n        while l <= r:\n            m = (l + r) // 2\n            if self.bfs(heights, rows, cols, m):\n                res = m\n                r = m - 1\n            else:\n                l = m + 1\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort"}