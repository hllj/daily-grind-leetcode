{"id":713903062,"lang":"python3","time":"1Â month","timestamp":1654310180,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/713903062/","is_pending":"Not Pending","title":"N-Queens","memory":"14.5 MB","code":"class Solution:\n    def find(self, idx, n, X, column, main_diag, aux_diag):\n        if idx == n:\n            sol = []\n            for i in range(n):\n                board = ['.' for _ in range(n)]\n                j = X[i]\n                board[j] = 'Q'\n                sol.append(''.join(board))\n            self.solution.append(sol)\n            return\n        for j in range(n):\n            if column[j] and main_diag[idx - j + n - 1] and aux_diag[idx + j]:\n                X[idx] = j\n                main_diag[idx - j + n - 1] = False\n                aux_diag[idx + j] = False\n                column[j] = False\n                self.find(idx + 1, n, X, column, main_diag, aux_diag)\n                X[idx] = -1\n                main_diag[idx - j + n - 1] = True\n                aux_diag[idx + j] = True\n                column[j] = True\n                        \n                \n    def solveNQueens(self, n: int) -> List[List[str]]:\n        main_diag = [True] * (2 * n)\n        aux_diag = [True] * (2 * n)\n        column = [True] * n\n        X = [-1] * n\n        self.solution = []\n        self.find(0, n, X, column, main_diag, aux_diag)\n        return self.solution","compare_result":"111111111","title_slug":"n-queens"}