{"id":312112097,"lang":"cpp","time":"2 years, 3 months","timestamp":1584119138,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/312112097/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.length();\n  s = \"#\" + s;\n  vector < vector<int> > f (n + 1);\n  for (int i = 0; i <= n; i++) \n    for (int j = 0; j <= n; j++)\n      f[i].push_back(0);\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= n; j++)\n      if (i == j) f[i][j] = 1;\n        else f[i][j] = 0;\n  for (int i = 1; i <= n; i++) \n    for (int j = i - 1; j >= 1; j--)\n      if (s[i] == s[j]) f[j][i] = f[j + 1][i - 1] + 2;\n        else f[j][i] = max(f[j + 1][i], f[j][i - 1]);\n\n  cout << f[1][n];\n  int x = 1, y = n;\n  string res = \"\";\n  while (x <= y) {\n    cout << x << \" \" << y << \"\\n\";\n    if (s[x] == s[y]) {\n      string temp = \"\";\n      if (x == y) {\n        temp = temp + s[x];\n      }\n      else {\n        temp = temp + s[x] + s[y];\n      }\n      res.insert(res.length() / 2, temp);\n      x++;\n      y--;\n    }\n    else {\n      if (f[x][y] == f[x + 1][y]) x++;\n      else y--;\n    }\n  }\n  return res;\n        \n    }\n};","compare_result":"1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-substring"}