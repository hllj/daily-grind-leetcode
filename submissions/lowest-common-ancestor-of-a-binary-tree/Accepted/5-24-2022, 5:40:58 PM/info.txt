{"id":706125229,"lang":"python3","time":"1 month, 1 week","timestamp":1653388858,"status_display":"Accepted","runtime":"134 ms","url":"/submissions/detail/706125229/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"27.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    candidates = []\n    candidates_value = []\n    cnt_descendant = {}\n    def descendant(self, d, p):\n        if d == None:\n            return False\n        if d.val == p.val:\n            if p.val not in self.cnt_descendant:\n                self.cnt_descendant[d.val] = 1\n            else:\n                self.cnt_descendant[d.val] += 1\n            return True\n        else:\n            is_descendant = self.descendant(d.left, p) or self.descendant(d.right, p)\n            if d.val not in self.cnt_descendant:\n                self.cnt_descendant[d.val] = 0\n            if is_descendant is True:\n                self.cnt_descendant[d.val] += 1\n            return is_descendant\n    def search(self, p):\n        if p == None:\n            return\n        if p.val not in self.cnt_descendant:\n            return\n        if self.cnt_descendant[p.val] == 2:\n            self.candidates.append(p)\n            self.candidates_value.append(p.val)\n        \n        if p.left != None:\n            self.search(p.left)\n        if p.right != None:\n            self.search(p.right)\n            \n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.candidates = []\n        self.candidates_value = []\n        self.cnt_descendant = {}\n        self.descendant(root, p)\n        self.descendant(root, q)\n        self.search(root)\n        return self.candidates[-1]","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}