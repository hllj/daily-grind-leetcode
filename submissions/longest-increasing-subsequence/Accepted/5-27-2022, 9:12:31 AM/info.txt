{"id":708015073,"lang":"python3","time":"1 month, 1 week","timestamp":1653617551,"status_display":"Accepted","runtime":"123 ms","url":"/submissions/detail/708015073/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"14.1 MB","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        inf = 2501\n        b = [inf] * (n + 1)\n        b[0] = -inf\n        res = 1\n        for i in range(1, n + 1):\n            l = 1\n            r = n\n            can = -1\n            while l <= r:\n                m = (l + r) // 2\n                if b[m] >= nums[i - 1]:\n                    can = m\n                    r = m - 1\n                else:\n                    l = m + 1\n            b[can] = nums[i - 1]\n            res = max(res, can)\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence"}