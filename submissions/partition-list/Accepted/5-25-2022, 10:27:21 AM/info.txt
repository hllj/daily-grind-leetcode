{"id":706633007,"lang":"python3","time":"1 month, 1 week","timestamp":1653449241,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/706633007/","is_pending":"Not Pending","title":"Partition List","memory":"13.9 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        less_root = None\n        less_p = None\n        greater_root = None\n        greater_p = None\n        p = head\n        while p != None:\n            if p.val < x:\n                if less_root == None:\n                    less_p = ListNode(p.val, None)\n                    less_root = less_p\n                else:\n                    new_node = ListNode(p.val, None)\n                    less_p.next = new_node\n                    less_p = less_p.next\n            else:\n                if greater_root == None:\n                    greater_p = ListNode(p.val, None)\n                    greater_root = greater_p\n                else:\n                    new_node = ListNode(p.val, None)\n                    greater_p.next = new_node\n                    greater_p = greater_p.next\n            p = p.next\n        if less_root != None:\n            less_p.next = greater_root\n        else:\n            less_root = greater_root\n        return less_root","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-list"}