{"id":735218636,"lang":"python3","time":"4 days, 23 hours","timestamp":1656607685,"status_display":"Accepted","runtime":"405 ms","url":"/submissions/detail/735218636/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"14.6 MB","code":"class Solution:\n    dx = [1, 0, -1, 0]\n    dy = [0, 1, 0, -1]\n    def bfs(self, grid, n, k):\n        q = []\n        visited = set()\n        q.append((0, 0))\n        visited.add((0, 0))\n        while len(q) > 0:\n            u, v = q.pop(0)\n            for i in range(4):\n                u1, v1 = u + self.dx[i], v + self.dy[i]\n                if u1 < 0 or u1 == n or v1 < 0 or v1 == n:\n                    continue\n                if (u1, v1) not in visited and grid[u1][v1] <= k and grid[u][v] <= k:\n                    if u1 == n - 1 and v1 == n - 1:\n                        return True\n                    q.append((u1, v1))\n                    visited.add((u1, v1))\n        return False\n                \n    def swimInWater(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        r = max(max(x) for x in grid)\n        l = min(min(x) for x in grid)\n        # print(l, r)\n        res = 0\n        while l <= r:\n            mid = (l + r) // 2\n            if self.bfs(grid, n, mid):\n                res = mid\n                r = mid - 1\n            else:\n                l = mid + 1\n        return res","compare_result":"1111111111111111111111111111111111111111111","title_slug":"swim-in-rising-water"}