{"id":729148291,"lang":"python3","time":"1 week, 5 days","timestamp":1655971540,"status_display":"Accepted","runtime":"153 ms","url":"/submissions/detail/729148291/","is_pending":"Not Pending","title":"Course Schedule","memory":"16.9 MB","code":"from collections import deque\n\nclass Solution:\n    def dfs(self, u, visited, sorted_nodes, adj):\n        if self.solution is False:\n            return\n        visited.add(u)\n        for v in adj[u]:\n            if v not in visited:\n                self.dfs(v, visited, sorted_nodes, adj)\n        for v in adj[u]:\n            if v not in sorted_nodes:\n                self.solution = False\n                break\n        sorted_nodes.appendleft(u)\n        \n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        adj = {}\n        for i in range(numCourses):\n            adj[i] = []\n        for x in prerequisites:\n            a, b = x\n            adj[b].append(a)\n        self.solution = True\n        sorted_nodes = deque()\n        visited = set()\n        for i in range(numCourses):\n            if self.solution is False:\n                return False\n            if i not in visited:\n                self.dfs(i, visited, sorted_nodes, adj)\n            \n        return True","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule"}