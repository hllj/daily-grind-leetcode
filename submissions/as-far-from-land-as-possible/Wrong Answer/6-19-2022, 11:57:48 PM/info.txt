{"id":726088064,"lang":"python3","time":"2 weeks, 1 day","timestamp":1655657868,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/726088064/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, -1, 0, 1]\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        f = [[0 for _ in range(n)] for _ in range(n)]\n        avail = [[True for _ in range(n)] for _ in range(n)]\n        q = []\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    q.append((i, j))\n        while len(q) > 0:\n            (u, v) = q.pop(0)\n            avail[u][v] = False\n            for k in range(4):\n                u1 = u + self.dx[k]\n                v1 = v + self.dy[k]\n                if u1 < 0 or u1 == n or v1 < 0 or v1 == n:\n                    continue\n                if grid[u1][v1] == 0:\n                    if avail[u1][v1] is True:\n                        f[u1][v1] = f[u][v] + 1\n                        q.append((u1, v1))\n                    else:\n                        f[u1][v1] = min(f[u1][v1], f[u][v] + 1)\n        res = 0\n        for i in range(n):\n            for j in range(n):\n                res = max(res, f[i][j])\n        if res == 0:\n            return -1\n        else:\n            return res","compare_result":"1111000000000000000000000000000000000","title_slug":"as-far-from-land-as-possible"}