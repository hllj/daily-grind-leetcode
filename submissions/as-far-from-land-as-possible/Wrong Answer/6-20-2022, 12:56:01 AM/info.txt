{"id":726126724,"lang":"python3","time":"2 weeks, 1 day","timestamp":1655661361,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/726126724/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, -1, 0, 1]\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        avail = [[True for _ in range(n)] for _ in range(n)]\n        q = []\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(4):\n                        u, v = i + self.dx[k], j + self.dy[k]\n                        if u < 0 or u == n or v < 0 or v == n:\n                            continue\n                        if grid[u][v] == 0:\n                            q.append((u, v))\n        step = 1\n        if (len(q) == 0):\n            return -1\n        while len(q) > 0:\n            step += 1\n            q1 = []\n            while len(q) > 0:\n                (u, v) = q.pop(0)\n                grid[u][v] = step\n                avail[u][v] = False\n                for k in range(4):\n                    u1, v1 = u + self.dx[k], v + self.dy[k]\n                    if u1 < 0 or u1 == n or v1 < 0 or v1 == n:\n                        continue\n                    if avail[u1][v1] is True and grid[u1][v1] == 0:\n                        q1.append((u1, v1))\n            q, q1 = q1, q\n        return step - 1","compare_result":"1111100000101100110000100001000000000","title_slug":"as-far-from-land-as-possible"}