{"id":726134772,"lang":"python3","time":"2 weeks, 2 days","timestamp":1655662061,"status_display":"Accepted","runtime":"1220 ms","url":"/submissions/detail/726134772/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"14.8 MB","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, -1, 0, 1]\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        avail = [[True for _ in range(n)] for _ in range(n)]\n        f = [[0 for _ in range(n)] for _ in range(n)]\n        q = []\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    f[i][j] = 0\n                    q.append((i, j))\n                    avail[i][j] = False\n        while len(q) > 0:\n            q1 = []\n            while len(q) > 0:\n                (u, v) = q.pop(0)\n                for k in range(4):\n                    u1, v1 = u + self.dx[k], v + self.dy[k]\n                    if u1 < 0 or u1 == n or v1 < 0 or v1 == n:\n                        continue\n                    if avail[u1][v1] is True and grid[u1][v1] == 0:\n                        q1.append((u1, v1))\n                        avail[u1][v1] = False\n                        f[u1][v1] = f[u][v] + 1\n            q, q1 = q1, q\n        res = 0\n        for i in range(n):\n            for j in range(n):\n                res = max(res, f[i][j])\n        if res == 0:\n            return -1\n        else:\n            return res","compare_result":"1111111111111111111111111111111111111","title_slug":"as-far-from-land-as-possible"}