{"id":737222988,"lang":"python3","time":"2 days, 8 hours","timestamp":1656831446,"status_display":"Accepted","runtime":"1428 ms","url":"/submissions/detail/737222988/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"35.5 MB","code":"class Solution:\n    def check_palindrome(self, s):\n        n = len(s)\n        for i in range(n // 2):\n            if s[i] != s[n - i - 1]:\n                return False\n        return True\n    def partition(self, s: str) -> List[List[str]]:\n        n = len(s)\n        f = [None for _ in range(n + 1)]\n        f[0] = [['']]\n        for i in range(1, n + 1):\n            f[i] = []\n            for j in range(i):\n                if self.check_palindrome(s[j: i]):\n                    # print('part', s[j: i])\n                    for x in f[j]:\n                        f[i].append(x + [s[j: i]])\n            print(i, f[i])\n        res = []\n        for part in f[n]:\n            part.remove('')\n            res.append(part)\n        return res","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning"}