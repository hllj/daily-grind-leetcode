{"id":737231241,"lang":"python3","time":"3 days, 9 hours","timestamp":1656832226,"status_display":"Accepted","runtime":"1432 ms","url":"/submissions/detail/737231241/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"32.1 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        n = len(s)\n        f = [None for _ in range(n + 1)]\n        f[0] = [['']]\n        p = [[False for _ in range(n + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            p[i][i] = True\n        for i in range(1, n):\n            p[i + 1][i] = True\n        for i in range(2, n + 1):\n            for j in range(i - 1, 0, -1):\n                p[j][i] = (p[j + 1][i - 1]) and s[j - 1] == s[i - 1]\n        for i in range(1, n + 1):\n            f[i] = []\n            for j in range(i):\n                if p[j + 1][i]:\n                    for x in f[j]:\n                        f[i].append(x + [s[j: i]])\n        res = []\n        for part in f[n]:\n            part.remove('')\n            res.append(part)\n        return res","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning"}