{"id":727264706,"lang":"python3","time":"2 weeks, 1 day","timestamp":1655781620,"status_display":"Accepted","runtime":"741 ms","url":"/submissions/detail/727264706/","is_pending":"Not Pending","title":"Furthest Building You Can Reach","memory":"28.6 MB","code":"import heapq\n\nclass Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n        n = len(heights)\n        diff = [0] * n\n        s_ladders = [0] * n\n        for i in range(1, n):\n            if heights[i] > heights[i - 1]:\n                diff[i] = heights[i] - heights[i - 1]\n            else:\n                diff[i] = 0\n        li = [diff[0]]\n        heapq.heapify(li)\n        sum_heap = 0\n        for i in range(1, n):\n            if diff[i] != 0:\n                if len(li) < ladders:\n                    heapq.heappush(li, diff[i])\n                    sum_heap += diff[i]\n                else:\n                    if (ladders > 0) and (diff[i] > li[0]):\n                        # min_ele = heapq.heappop(li)\n                        sum_heap += diff[i] - heapq.heappop(li)\n                        heapq.heappush(li, diff[i])\n            s_ladders[i] = sum_heap\n        s = 0\n        res = 0\n        for i in range(1, n):\n            s += diff[i]\n            if s - s_ladders[i] <= bricks:\n                res = i\n            else:\n                break\n        return res","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"furthest-building-you-can-reach"}