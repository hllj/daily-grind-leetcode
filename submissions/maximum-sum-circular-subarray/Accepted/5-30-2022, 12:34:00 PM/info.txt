{"id":710250361,"lang":"python3","time":"1 month, 1 week","timestamp":1653888840,"status_display":"Accepted","runtime":"954 ms","url":"/submissions/detail/710250361/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"19 MB","code":"class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        max_sub = nums[0]\n        cur_max = nums[0]\n        min_sub = nums[0]\n        cur_min = nums[0]\n        s = nums[0]\n        for i in range(1, len(nums)):\n            cur_max = max(nums[i], cur_max + nums[i])\n            max_sub = max(max_sub, cur_max)\n            cur_min = min(nums[i], cur_min + nums[i])\n            min_sub = min(min_sub, cur_min)\n            s += nums[i]\n        if max_sub < 0:\n            return max_sub\n        else:\n            return max(max_sub, s - min_sub)\n        \n# maximum subarray (i, j) with 0 <= i <= j < n -> Just using Kanade algorithm to solve\n\n# maximum subarray (i, n - 1) + (0, j) with 0 <= i < n and 0 <= j, j < i","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray"}