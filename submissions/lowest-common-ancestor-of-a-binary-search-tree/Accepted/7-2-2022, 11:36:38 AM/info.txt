{"id":736316778,"lang":"python3","time":"4 days, 11 hours","timestamp":1656736598,"status_display":"Accepted","runtime":"97 ms","url":"/submissions/detail/736316778/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"18.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        while True:\n            large = max(p.val, q.val)\n            small = min(p.val, q.val)\n            if root.val < small:\n                root = root.right\n            elif root.val > large:\n                root = root.left\n            else:\n                return root","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}