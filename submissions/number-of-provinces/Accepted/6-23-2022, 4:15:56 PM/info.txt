{"id":729184888,"lang":"python3","time":"1 week, 5 days","timestamp":1655975756,"status_display":"Accepted","runtime":"429 ms","url":"/submissions/detail/729184888/","is_pending":"Not Pending","title":"Number of Provinces","memory":"14.2 MB","code":"class Solution:\n    def dfs(self, u, visited, adj):\n        visited.add(u)\n        for v in adj[u]:\n            if v not in visited:\n                self.dfs(v, visited, adj)\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        n = len(isConnected)\n        adj = {}\n        for i in range(n):\n            adj[i] = []\n            for j in range(n):\n                if isConnected[i][j] == 1:\n                    adj[i].append(j)\n        visited = set()\n        cnt = 0\n        for i in range(n):\n            if i not in visited:\n                cnt += 1\n                self.dfs(i, visited, adj)\n        return cnt","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces"}