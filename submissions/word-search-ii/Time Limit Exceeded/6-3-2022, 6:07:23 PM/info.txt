{"id":713479721,"lang":"python3","time":"1Â month","timestamp":1654254443,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/713479721/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution:\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n    def dfs(self, avail, board, idx, word, x, y, n, m):\n        if idx == len(word) - 1:\n            return True\n        check = False\n        for i in range(4):\n            new_x = x + self.dx[i]\n            new_y = y + self.dy[i]\n            if new_x < 0 or new_x == n or new_y < 0 or new_y == m:\n                continue\n            if (board[new_x][new_y] == word[idx + 1]) and (avail[new_x][new_y]):\n                avail[new_x][new_y] = False\n                res = self.dfs(avail, board, idx + 1, word, new_x, new_y, n, m)\n                check = check or res\n                if check == True:\n                    return True\n                avail[new_x][new_y] = True\n        return check\n    \n    \n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        n = len(board)\n        m = len(board[0])\n        # avail = [[True for _ in range(m)] for _ in range(n)]\n        res = []\n        for word in words:\n            avail = [[True for _ in range(m)] for _ in range(n)]\n            for i in range(n):\n                for j in range(m):\n                    if board[i][j] == word[0]:\n                        avail[i][j] = False\n                        check = self.dfs(avail, board, 0, word, i, j, n, m)\n                        if check == True:\n                            if word not in res:\n                                res.append(word)\n                        avail[i][j] = True\n        return res","compare_result":"111111111111111111111111111111111111111111000000000000000000000","title_slug":"word-search-ii"}