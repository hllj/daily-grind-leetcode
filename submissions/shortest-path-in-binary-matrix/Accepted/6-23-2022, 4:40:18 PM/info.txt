{"id":729197557,"lang":"python3","time":"2Â weeks","timestamp":1655977218,"status_display":"Accepted","runtime":"820 ms","url":"/submissions/detail/729197557/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"15.5 MB","code":"class Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        if grid[0][0] != 0:\n            return -1\n        f = [[-1 for _ in range(n)] for _ in range(n)]\n        q = [(0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        f[0][0] = 1\n        dx = [-1, -1, -1, 0, 0, 1, 1, 1]\n        dy = [-1, 0, 1, -1, 1, -1, 0, 1]\n        while len(q) > 0:\n            (u, v) = q.pop(0)\n            for k in range(8):\n                u1, v1 = u + dx[k], v + dy[k]\n                if u1 < 0 or u1 == n or v1 < 0 or v1 == n:\n                    continue\n                if (u1, v1) not in visited and grid[u1][v1] == 0:\n                    q.append((u1, v1))\n                    visited.add((u1, v1))\n                    f[u1][v1] = f[u][v] + 1\n        return f[n - 1][n - 1]","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix"}